<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'>
<nta>
	<declaration>/*
Queueing part is cited from: 
"Automatic Verification of Real-Time Communicating Systems by Constraint Solving", 
by Wang Yi, Paul Pettersson and Mats Daniels. In Proceedings of the 7th International
Conference on Formal Description Techniques, pages 223-238, North-Holland. 1994.

Sliding window plan:
- Reuse packet for next batch (i.e. 1-2-3 flow should only use 3 templates)
- Implement ack on the same template
*/

const int N = 6;   // # packet
const int E = 30; // # entity
// 0 -&gt; dummy link / network
// 1-9 -&gt; nodes
// 10-19 -&gt; link
// 20-30 -&gt; switch

typedef int[0,N-1] pkt_id_t;
typedef int[0,E-1] ent_id_t;

broadcast chan leave[N][E][E], appr[N][E][E], drop[N];
</declaration>
	<template>
		<name>Link</name>
		<parameter>const ent_id_t eid, ent_id_t endpoint1, ent_id_t endpoint2, int success_odds, int fail_odds</parameter>
		<declaration>clock t;

pkt_id_t temp_pid;
ent_id_t temp_src_eid;</declaration>
		<location id="id0" x="-544" y="-17">
			<name x="-586" y="-25">A</name>
		</location>
		<location id="id1" x="-204" y="-17">
			<name x="-229" y="-51">on_link</name>
			<label kind="invariant" x="-221" y="0">t &lt; 5</label>
		</location>
		<location id="id2" x="68" y="-127">
			<name x="58" y="-161">success</name>
			<label kind="invariant" x="59" y="-178">t&lt;2</label>
		</location>
		<location id="id3" x="68" y="85">
			<name x="59" y="110">drop</name>
			<label kind="invariant" x="59" y="127">t &lt; 2</label>
		</location>
		<branchpoint id="id4" x="68" y="-17">
		</branchpoint>
		<init ref="id0"/>
		<transition>
			<source ref="id2"/>
			<target ref="id0"/>
			<label kind="guard" x="-527" y="-195">t&gt;=1</label>
			<label kind="synchronisation" x="-527" y="-178">leave[temp_pid][eid][temp_src_eid == endpoint1 ? endpoint2 : endpoint1]!</label>
			<label kind="assignment" x="-527" y="-161">t=0</label>
			<nail x="-544" y="-127"/>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id2"/>
			<label kind="probability" x="85" y="-76">success_odds</label>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id3"/>
			<label kind="probability" x="85" y="25">fail_odds</label>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id0"/>
			<label kind="guard" x="-527" y="93">t&gt;=1</label>
			<label kind="assignment" x="-527" y="110">t=0</label>
			<nail x="-545" y="85"/>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id4"/>
			<label kind="guard" x="-144" y="-42">t &gt;= 1</label>
			<label kind="assignment" x="-144" y="-17">t=0</label>
		</transition>
		<transition>
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="select" x="-519" y="-93">pid : pkt_id_t,
src_eid: ent_id_t</label>
			<label kind="synchronisation" x="-519" y="-59">leave[pid][src_eid][eid]?</label>
			<label kind="assignment" x="-519" y="-42">temp_pid=pid,temp_src_eid=src_eid, t=0</label>
		</transition>
	</template>
	<template>
		<name x="40" y="16">Switch</name>
		<parameter>const ent_id_t eid</parameter>
		<declaration>const int qsize = 5;

clock t;

pkt_id_t temp_pid; // for holding incoming packets
ent_id_t temp_dst;

ent_id_t getPort(ent_id_t dst) {
    ent_id_t forwarding[5]; // forwarding[i] == next_hop to reach node i

    if (eid == 20) {
        forwarding[1] = 10;
        forwarding[2] = 11; // link number ~ port number
        forwarding[3] = 14;
        forwarding[4] = 14;
    } else if (eid == 21) {
        forwarding[1] = 14;
        forwarding[2] = 14;
        forwarding[3] = 12;
        forwarding[4] = 13;
    } 

    return forwarding[dst];
}

// ============
// Packet queue
// ============

pkt_id_t list[qsize+1];
int[0,qsize] len;

// Put an element at the end of the queue
void enqueue(pkt_id_t element)
{
        list[len++] = element;
}

// Remove the front element of the queue
void dequeue()
{
        int i = 0;
        len -= 1;
        while (i &lt; len)
        {
                list[i] = list[i + 1];
                i++;
        }
        list[i] = 0;
}

// Returns the front element of the queue
pkt_id_t front()
{
   return list[0];
}

// Returns the last element of the queue
pkt_id_t tail()
{
   return list[len - 1];
}

// -----

pkt_id_t listD[qsize+1];
int[0,qsize] lenD;

// Put an element at the end of the queue
void enqueueD(pkt_id_t element)
{
        listD[lenD++] = element;
}

// Remove the front element of the queue
void dequeueD()
{
        int i = 0;
        lenD -= 1;
        while (i &lt; lenD)
        {
                listD[i] = listD[i + 1];
                i++;
        }
        listD[i] = 0;
}

// Returns the front element of the queue
pkt_id_t frontD()
{
   return listD[0];
}

// Returns the last element of the queue
pkt_id_t tailD()
{
   return listD[len - 1];
}


</declaration>
		<location id="id5" x="-76" y="-314">
			<name x="-59" y="-340">idle</name>
			<label kind="invariant" x="-136" y="-323">t &lt; 4</label>
		</location>
		<location id="id6" x="306" y="-314">
			<name x="314" y="-306">received</name>
			<committed/>
		</location>
		<location id="id7" x="714" y="-314">
			<name x="731" y="-331">empty</name>
		</location>
		<init ref="id7"/>
		<transition>
			<source ref="id6"/>
			<target ref="id7"/>
			<label kind="guard" x="450" y="-450">len + 1 &gt; qsize &amp;&amp; len == 0</label>
			<nail x="339" y="-416"/>
			<nail x="714" y="-416"/>
		</transition>
		<transition>
			<source ref="id5"/>
			<target ref="id7"/>
			<label kind="guard" x="187" y="-187">t &gt;= 1 &amp;&amp; len - 1 == 0</label>
			<label kind="synchronisation" x="187" y="-170">leave[front()][eid][getPort(frontD())]!</label>
			<label kind="assignment" x="187" y="-153">dequeue(),
dequeueD(),
t=0</label>
			<nail x="-76" y="-212"/>
			<nail x="714" y="-212"/>
		</transition>
		<transition>
			<source ref="id5"/>
			<target ref="id5"/>
			<label kind="guard" x="-348" y="-357">t &gt;= 1 &amp;&amp; len - 1 &gt; 0</label>
			<label kind="synchronisation" x="-348" y="-340">leave[front()][eid][getPort(frontD())]!</label>
			<label kind="assignment" x="-348" y="-323">dequeue(),
dequeueD(),
t=0</label>
			<nail x="-170" y="-416"/>
			<nail x="-357" y="-416"/>
			<nail x="-357" y="-212"/>
			<nail x="-170" y="-212"/>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id6"/>
			<label kind="select" x="365" y="-408">pid : pkt_id_t,
dst: ent_id_t</label>
			<label kind="synchronisation" x="365" y="-374">appr[pid][dst][eid]?</label>
			<label kind="assignment" x="365" y="-357">temp_pid=pid,
temp_dst=dst,
t=0</label>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id5"/>
			<label kind="guard" x="-8" y="-297">len + 1 &lt;= qsize</label>
			<label kind="assignment" x="-8" y="-280">enqueue(temp_pid), enqueueD(temp_dst)</label>
			<nail x="306" y="-255"/>
			<nail x="-34" y="-255"/>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id5"/>
			<label kind="guard" x="34" y="-450">len + 1 &gt; qsize &amp;&amp; len &gt; 0</label>
			<nail x="280" y="-416"/>
			<nail x="-76" y="-416"/>
		</transition>
		<transition>
			<source ref="id5"/>
			<target ref="id6"/>
			<label kind="select" x="144" y="-408">pid : pkt_id_t,
dst: ent_id_t</label>
			<label kind="synchronisation" x="144" y="-374">appr[pid][dst][eid]?</label>
			<label kind="assignment" x="144" y="-357">temp_pid=pid,
temp_dst=dst</label>
		</transition>
	</template>
	<template>
		<name x="40" y="16">Packet</name>
		<parameter>const pkt_id_t pid, ent_id_t src, ent_id_t dst</parameter>
		<declaration>// TODO: how to parameterize this?

// Clock
clock t;
clock total;

// Packet data
int[0,2] type;

// Forwarding
ent_id_t prev_hop;
ent_id_t next_hop;
ent_id_t final_hop;

ent_id_t getPort(ent_id_t cur_loc, ent_id_t dst) {
    ent_id_t forwarding[5]; // forwarding[i] == next_hop to reach node i

    if (cur_loc == 1) {
        forwarding[1] = 10;
        forwarding[2] = 10; // link number ~ port number
        forwarding[3] = 10;
        forwarding[4] = 10;
    } else if (cur_loc == 2) {
        forwarding[1] = 11;
        forwarding[2] = 11;
        forwarding[3] = 11;
        forwarding[4] = 11;
    } else if (cur_loc == 3) {
        forwarding[1] = 12;
        forwarding[2] = 12;
        forwarding[3] = 12;
        forwarding[4] = 12;
    } else if (cur_loc == 4) {
        forwarding[1] = 13;
        forwarding[2] = 13;
        forwarding[3] = 13;
        forwarding[4] = 13;
    } else if (cur_loc == 20) {
        forwarding[1] = 10;
        forwarding[2] = 11;
        forwarding[3] = 14;
        forwarding[4] = 14;
    } else if (cur_loc == 21) {
        forwarding[1] = 14;
        forwarding[2] = 14;
        forwarding[3] = 12;
        forwarding[4] = 13;
    } 

    return forwarding[dst];
}</declaration>
		<location id="id8" x="59" y="-212">
			<name x="76" y="-238">on_link</name>
		</location>
		<location id="id9" x="59" y="-646">
			<name x="34" y="-689">on_switch</name>
		</location>
		<location id="id10" x="8" y="-433">
			<committed/>
		</location>
		<location id="id11" x="-714" y="-212">
			<name x="-781" y="-195">on_sender</name>
		</location>
		<location id="id12" x="850" y="-212">
			<name x="867" y="-195">on_receiver</name>
		</location>
		<init ref="id11"/>
		<transition>
			<source ref="id8"/>
			<target ref="id12"/>
			<label kind="select" x="340" y="-178">temp_prev_hop : ent_id_t</label>
			<label kind="guard" x="340" y="-161">t &gt;= 1</label>
			<label kind="synchronisation" x="340" y="-144">leave[pid][temp_prev_hop][dst]?</label>
			<label kind="assignment" x="340" y="-127">prev_hop = temp_prev_hop,
t = 0</label>
		</transition>
		<transition>
			<source ref="id9"/>
			<target ref="id8"/>
			<label kind="select" x="153" y="-467">temp_prev_hop : ent_id_t,
temp_next_hop : ent_id_t</label>
			<label kind="guard" x="153" y="-433">t &gt;= 1</label>
			<label kind="synchronisation" x="153" y="-416">leave[pid][temp_prev_hop][temp_next_hop]?</label>
			<label kind="assignment" x="153" y="-399">prev_hop = temp_prev_hop,
next_hop = temp_next_hop</label>
			<nail x="119" y="-433"/>
		</transition>
		<transition>
			<source ref="id11"/>
			<target ref="id8"/>
			<label kind="select" x="-459" y="-187">temp_next_hop : ent_id_t</label>
			<label kind="synchronisation" x="-459" y="-170">leave[pid][src][temp_next_hop]?</label>
			<label kind="assignment" x="-459" y="-153">prev_hop = src,
next_hop = temp_next_hop,
type = 1,
total = 0</label>
		</transition>
		<transition>
			<source ref="id10"/>
			<target ref="id9"/>
			<label kind="synchronisation" x="-153" y="-561">appr[pid][dst][next_hop]!</label>
		</transition>
		<transition>
			<source ref="id8"/>
			<target ref="id10"/>
			<label kind="select" x="-187" y="-408">temp_prev_hop : ent_id_t,
temp_next_hop : ent_id_t</label>
			<label kind="guard" x="-229" y="-366">t &gt;= 1 &amp;&amp; temp_next_hop != dst</label>
			<label kind="synchronisation" x="-323" y="-349">leave[pid][temp_prev_hop][temp_next_hop]?</label>
			<label kind="assignment" x="-204" y="-332">prev_hop = temp_prev_hop,
next_hop = temp_next_hop</label>
		</transition>
	</template>
	<template>
		<name>PingHost</name>
		<parameter>const ent_id_t eid</parameter>
		<declaration>clock t;</declaration>
		<location id="id13" x="-833" y="68">
			<name x="-960" y="59">uninstantiated</name>
			<label kind="invariant" x="-843" y="85">t &lt; 2</label>
		</location>
		<location id="id14" x="-501" y="68">
			<name x="-484" y="34">instantiated</name>
			<label kind="invariant" x="-527" y="85">t &lt;= 50</label>
		</location>
		<location id="id15" x="-102" y="68">
			<name x="-111" y="34">acked</name>
		</location>
		<init ref="id13"/>
		<transition>
			<source ref="id14"/>
			<target ref="id13"/>
			<label kind="guard" x="-789" y="-26">t&gt;=50</label>
			<label kind="assignment" x="-789" y="8">t=0</label>
			<nail x="-527" y="8"/>
			<nail x="-807" y="8"/>
		</transition>
		<transition>
			<source ref="id14"/>
			<target ref="id15"/>
			<label kind="synchronisation" x="-374" y="76">leave[2][10][1]?</label>
		</transition>
		<transition>
			<source ref="id13"/>
			<target ref="id14"/>
			<label kind="guard" x="-731" y="93">t &gt;= 1</label>
			<label kind="synchronisation" x="-731" y="76">leave[1][eid][10]!</label>
			<label kind="assignment" x="-731" y="110">t = 0</label>
		</transition>
	</template>
	<template>
		<name>PongHost</name>
		<parameter>const ent_id_t eid</parameter>
		<location id="id16" x="0" y="0">
		</location>
		<location id="id17" x="153" y="0">
			<committed/>
		</location>
		<init ref="id16"/>
		<transition>
			<source ref="id17"/>
			<target ref="id16"/>
			<label kind="synchronisation" x="119" y="42">leave[2][4][13]!</label>
			<nail x="68" y="68"/>
		</transition>
		<transition>
			<source ref="id16"/>
			<target ref="id17"/>
			<label kind="select" x="25" y="-51">pid : pkt_id_t</label>
			<label kind="synchronisation" x="25" y="-34">leave[pid][13][eid]?</label>
		</transition>
	</template>
	<system>L_1_20 = Link(10, 1, 20, 99, 1);
L_2_20 = Link(11, 2, 20, 99, 1);
L_3_21 = Link(12, 3, 21, 99, 1);
L_4_21 = Link(13, 4, 21, 99, 1);
L_20_21 = Link(14, 21, 20, 99, 1);

H1 = PingHost(1);
H2 = PongHost(4); // Ack

S20 = Switch(20);
S21 = Switch(21);

P1 = Packet(1, 1, 4); // Ping
P2 = Packet(2, 4, 1); // Pong

system H1, H2, P1, P2, S20, S21, L_1_20, L_2_20, L_3_21, L_4_21, L_20_21;

///system Host;

/*gantt {
  G: // gate line
     Switch.len&gt;0 -&gt; 2+17*(Switch.len-1)/2; // shade of blue
  T(i:id_t): // train lines
     //Train(i).Safe -&gt; 3, // violet, or omit for white
     Packet(i).Appr -&gt; 6, // yellow
     Packet(i).Stop -&gt; 1, // green
     Packet(i).Start -&gt; 2, // blue
     Packet(i).Cross -&gt; 0; // red
   //C(i:int[0,64]): true -&gt; i; // color palette
}*/</system>
	<queries>
		<query>
			<formula>Pr[# &lt;= 40](&lt;&gt; P1.on_receiver)
			</formula>
			<comment>Probabilistic Reachability
			</comment>
		</query>
		<query>
			<formula>Pr[# &lt;= 100](&lt;&gt; H1.acked)
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>Pr[P1.t &lt;= 25](&lt;&gt; P1.on_receiver)
			</formula>
			<comment>Bounded Reachability
			</comment>
		</query>
		<query>
			<formula>simulate[P1.t&lt;=10]{P1.t}
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>simulate[&lt;=100]{ Train(0).x, Gate.len }
			</formula>
			<comment>Plot the change in the clock x and the queue length over time.
Expect two trajectories from one simulation of up to 100 time units.
			</comment>
		</query>
		<query>
			<formula>simulate[&lt;=100; 10]{ Train(0).x, Gate.len }
			</formula>
			<comment>Plot the change in the clock x and the queue length over time.
Expect 10+10 trajectories from 10 simulations of up to 100 time units.
			</comment>
		</query>
		<query>
			<formula>simulate[&lt;=100]{ sum(i:id_t) Train(i).Stop }
			</formula>
			<comment>Count the trains that are stopped over time.
Expect one trajectory from one simulation.
			</comment>
		</query>
		<query>
			<formula>E[&lt;=100](max: sum(i:id_t) Train(i).Stop)
			</formula>
			<comment>Compute an expected maximum value of trains being stopped.
Expect a mean estimate based on two samples
(one statistical degree of freedom, assuming Student's t-distribution).
			</comment>
		</query>
		<query>
			<formula>E[&lt;=100; 2000](max: sum(i:id_t) Train(i).Stop)
			</formula>
			<comment>Compute an expected maximum value of trains being stopped.
Expect a mean estimate based on 2000 samples (assuming Student's t-distribution).
			</comment>
		</query>
		<query>
			<formula>Pr[&lt;=100](&lt;&gt; Train(0).Cross)
			</formula>
			<comment>Estimate the probability that the train arrives to the crossing before 100 time units.
			</comment>
		</query>
		<query>
			<formula>Pr[&lt;=100](&lt;&gt; Train(1).Cross)
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>Pr[&lt;=100](&lt;&gt; Train(2).Cross)
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>Pr[&lt;=100](&lt;&gt; Train(3).Cross)
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>Pr[&lt;=100](&lt;&gt; Train(4).Cross)
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>Pr[&lt;=100](&lt;&gt; Train(5).Cross)
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>Pr[&lt;=100; 400](&lt;&gt; Train(5).Cross)
			</formula>
			<comment>Estimate the probability of the train arriving to the crossing before 100 time units.
Expect more precise estimate (and more refined distribution plots) from 400 simulation runs.
			</comment>
		</query>
		<query>
			<formula>Pr[&lt;=100](&lt;&gt; Train(0).Cross and (forall(i : id_t) i != 0 imply Train(i).Stop))
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>Pr[&lt;=100](&lt;&gt; Train(1).Cross and (forall(i : id_t) i != 1 imply Train(i).Stop))
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>Pr[&lt;=100](&lt;&gt; Train(2).Cross and (forall(i : id_t) i != 2 imply Train(i).Stop))
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>Pr[&lt;=100](&lt;&gt; Train(3).Cross and (forall(i : id_t) i != 3 imply Train(i).Stop))
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>Pr[&lt;=100](&lt;&gt; Train(4).Cross and (forall(i : id_t) i != 4 imply Train(i).Stop))
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>Pr[&lt;=100](&lt;&gt; Train(5).Cross and (forall(i : id_t) i != 5 imply Train(i).Stop))
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>Pr[&lt;=600](&lt;&gt; Train(1).Cross and (forall(i : id_t) i != 1 imply Train(i).Stop)) &gt;=
Pr[&lt;=600](&lt;&gt; Train(5).Cross and (forall(i : id_t) i != 5 imply Train(i).Stop))
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>Pr[#&lt;=20]([] 
  forall(i : id_t) 
    forall(j : id_t) 
      Train(i).Cross &amp;&amp; Train(j).Cross imply i == j
) &gt;= 0.98
			</formula>
			<comment>Check that within 20 discrete transition the probability of no colision 
(no two trains in the crossing) is larger than 98%.
			</comment>
		</query>
		<query>
			<formula>
			</formula>
			<comment>===== Validation Properties:
			</comment>
		</query>
		<query>
			<formula>E&lt;&gt; Gate.Occ
			</formula>
			<comment>Gate can receive (and store in queue) msg's from approaching trains.
			</comment>
		</query>
		<query>
			<formula>E&lt;&gt; Train(0).Cross
			</formula>
			<comment>Train 0 can reach crossing.
			</comment>
		</query>
		<query>
			<formula>E&lt;&gt; Train(1).Cross
			</formula>
			<comment>Train 1 can reach crossing.
			</comment>
		</query>
		<query>
			<formula>E&lt;&gt; Train(0).Cross and Train(1).Stop
			</formula>
			<comment>Train 0 can be crossing bridge while Train 1 is waiting to cross.
			</comment>
		</query>
		<query>
			<formula>E&lt;&gt; Train(0).Cross and (forall (i : id_t) i != 0 imply Train(i).Stop)
			</formula>
			<comment>Train 0 can cross bridge while the other trains are waiting to cross.
			</comment>
		</query>
		<query>
			<formula>
			</formula>
			<comment>===== Safety Properties:
			</comment>
		</query>
		<query>
			<formula>A[] forall (i : id_t) forall (j : id_t) Train(i).Cross &amp;&amp; Train(j).Cross imply i == j
			</formula>
			<comment>There is never more than one train crossing the bridge (at
any time instance).
			</comment>
		</query>
		<query>
			<formula>A[] Gate.list[N] == 0
			</formula>
			<comment>There can never be N elements in the queue (thus the array will not overflow).
			</comment>
		</query>
		<query>
			<formula>
			</formula>
			<comment>===== Liveness Properties:
			</comment>
		</query>
		<query>
			<formula>Train(0).Appr --&gt; Train(0).Cross
			</formula>
			<comment>Whenever a train approaches the bridge, it will eventually cross.
			</comment>
		</query>
		<query>
			<formula>Train(1).Appr --&gt; Train(1).Cross
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>Train(2).Appr --&gt; Train(2).Cross
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>Train(3).Appr --&gt; Train(3).Cross
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>Train(4).Appr --&gt; Train(4).Cross
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>Train(5).Appr --&gt; Train(5).Cross
			</formula>
			<comment>
			</comment>
		</query>
	</queries>
</nta>
